version: '3.8'

# Define services
services:
  # API Gateway Service
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
      target: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MAX_MEMORY=512M
      - MAX_CONNECTIONS=1000
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - RATE_LIMIT_WINDOW=15
      - RATE_LIMIT_MAX_REQUESTS=100
    depends_on:
      redis:
        condition: service_healthy
      asset-service:
        condition: service_healthy
      reader-service:
        condition: service_healthy
      visualization-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - rfid_network
    volumes:
      - api_gateway_logs:/app/logs
      - api_gateway_node_modules:/app/node_modules

  # Asset Service
  asset-service:
    build:
      context: ./asset-service
      dockerfile: Dockerfile
      target: production
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - DB_URL=jdbc:postgresql://postgres:5432/rfid_assets
      - DB_USERNAME=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_POOL_SIZE=10
      - JAVA_OPTS=-XX:+UseG1GC -XX:MaxRAMPercentage=75.0 -XX:+HeapDumpOnOutOfMemoryError
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - rfid_network
    volumes:
      - asset_service_logs:/app/logs
      - asset_service_data:/tmp/heapdump

  # Reader Service
  reader-service:
    build:
      context: ./reader-service
      dockerfile: Dockerfile
      target: production
    ports:
      - "8000:8000"
      - "9090:9090"
    environment:
      - PYTHONUNBUFFERED=1
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=${INFLUXDB_ORG}
      - INFLUXDB_BUCKET=rfid_reads
      - LOG_LEVEL=DEBUG
    depends_on:
      influxdb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - rfid_network
    volumes:
      - reader_service_logs:/app/logs
      - reader_service_data:/tmp/reader-service

  # Visualization Service
  visualization-service:
    build:
      context: ./visualization-service
      dockerfile: Dockerfile
      target: production
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - REDIS_URL=redis://redis:6379
      - ENABLE_METRICS=true
      - METRICS_PATH=/metrics
      - ELASTIC_APM_ACTIVE=false
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - rfid_network
    volumes:
      - visualization_service_logs:/app/logs
      - visualization_service_node_modules:/app/node_modules

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=rfid_assets
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d rfid_assets"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    networks:
      - rfid_network
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # InfluxDB Time-series Database
  influxdb:
    image: influxdb:2.6-alpine
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=rfid_reads
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - rfid_network
    volumes:
      - influxdb_data:/var/lib/influxdb2

  # Redis Cache
  redis:
    image: redis:7.0-alpine
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
    networks:
      - rfid_network
    volumes:
      - redis_data:/data

# Define networks
networks:
  rfid_network:
    driver: bridge
    name: rfid_net
    driver_opts:
      com.docker.network.bridge.name: rfid_net
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1

# Define volumes
volumes:
  postgres_data:
    driver: local
  influxdb_data:
    driver: local
  redis_data:
    driver: local
  api_gateway_logs:
    driver: local
  api_gateway_node_modules:
    driver: local
  asset_service_logs:
    driver: local
  asset_service_data:
    driver: local
  reader_service_logs:
    driver: local
  reader_service_data:
    driver: local
  visualization_service_logs:
    driver: local
  visualization_service_node_modules:
    driver: local